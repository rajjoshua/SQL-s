WITH ranked_transactions AS (
  SELECT
    tp.party_id,
    ai.tran_month,
    ai.tran_year,
    tp.eap_as_of_date,
    tp.tran_key,
    t.tran_id,
    t.tran_status,
    t.transaction_type,
    t.tran_amount,
    ROW_NUMBER() OVER (PARTITION BY tp.party_id, ai.tran_month, ai.tran_year, t.tran_id, t.transaction_type ORDER BY tp.eap_as_of_date DESC) AS row_num
  FROM
    fund_transactions t
    JOIN account_info ai ON t.account_id = ai.account_id
    JOIN transfer_party tp ON tp.tran_key = t.tran_key AND tp.eap_as_of_date = t.eap_as_of_date
  WHERE
    t.tran_status IN ('New', 'Updated', 'Cancelled')
  UNION ALL
  SELECT
    tp.party_id,
    ai.tran_month,
    ai.tran_year,
    tp.eap_as_of_date,
    tp.tran_key,
    t.tran_id,
    t.tran_status,
    t.transaction_type,
    t.tran_amount,
    ROW_NUMBER() OVER (PARTITION BY tp.party_id, ai.tran_month, ai.tran_year, t.tran_id, t.transaction_type ORDER BY tp.eap_as_of_date DESC) AS row_num
  FROM
    security_transactions t
    JOIN account_info ai ON t.account_id = ai.account_id
    JOIN transfer_party tp ON tp.tran_key = t.tran_key AND tp.eap_as_of_date = t.eap_as_of_date
  WHERE
    t.tran_status IN ('New', 'Updated', 'Cancelled')
),

transactions_with_status AS (
  SELECT
    r.*,
    MAX(CASE WHEN r.tran_status = 'Cancelled' THEN 1 ELSE 0 END) OVER (PARTITION BY r.party_id, r.tran_month, r.tran_year, r.tran_id, r.transaction_type) AS has_cancelled
  FROM ranked_transactions r
)

SELECT
  r.party_id,
  r.tran_month,
  r.tran_year,
  r.transaction_type,
  COUNT(CASE WHEN r.has_cancelled = 0 THEN 1 END) AS transaction_count, -- adjusted here to count all valid statuses
  SUM(CASE
    WHEN r.has_cancelled = 0 AND r.tran_status = 'New' THEN r.tran_amount
    WHEN r.has_cancelled = 0 AND r.tran_status = 'Updated' AND r.row_num = 1 THEN r.tran_amount
    ELSE 0
  END) AS aggregated_amount
FROM transactions_with_status r
GROUP BY
  r.party_id, r.tran_month, r.tran_year, r.transaction_type;
